import axios from "axios";

// ‚öôÔ∏è –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = "http://localhost:8000/kanban";

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const getAuthHeaders = () => {
  const token = localStorage.getItem("access_token");
  if (!token) throw new Error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

  return {
    Authorization: `Bearer ${token}`,
    "Content-Type": "application/json",
  };
};

// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
export const fetchDeals = async () => {
  try {
    console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å:", `${API_BASE_URL}/orders`);
    const response = await axios.get(`${API_BASE_URL}/orders`);
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–¥–µ–ª–∫–∏:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫:", error);
    return [];
  }
};

// ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
export const createDeal = async (dealData: any) => {
  try {
    let token = localStorage.getItem("access_token");

    if (!token) {
      console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å checkAuth(), –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
      token = localStorage.getItem("access_token");
    }

    if (!token) {
      throw new Error("üö® –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    const headers = getAuthHeaders();

    const newDealData = {
      name: dealData.name,
      description: dealData.description || null,
      date_of_creation: new Date().toISOString(),
      date_of_send: new Date().toISOString(),
      address: dealData.address || null,
      delivery_method: dealData.delivery_method || "COURIER",
      price: dealData.price,
      client_name: dealData.client_name,
      client_phone: dealData.client_phone,
      column_id: dealData.column_id,
    };

    console.log("üì§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", JSON.stringify(newDealData, null, 2));

    const response = await axios.post(`${API_BASE_URL}/orders`, newDealData, { headers });

    console.log("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:", response.data);
    return response.data;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", error);
    console.log("üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", JSON.stringify(error.response?.data, null, 2));
    throw error;
  }
};

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —É —Å–¥–µ–ª–∫–∏ (drag & drop)
export const updateDealColumn = async (dealId: string, newColumnId: string) => {
  try {
    const headers = getAuthHeaders();
    const payload = { column_id: newColumnId };

    console.log(`üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É ${dealId}: –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ${newColumnId}`);

    const response = await axios.patch(`${API_BASE_URL}/orders/${dealId}`, payload, { headers });

    console.log("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", error);
    throw error;
  }
};
