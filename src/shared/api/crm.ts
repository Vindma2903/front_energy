import axios from "axios";

const API_BASE_URL = "http://localhost:8000/kanban"; // –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL

export const fetchDeals = async () => {
  try {
    console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞:", `${API_BASE_URL}/orders`);
    const response = await axios.get(`${API_BASE_URL}/orders`);
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–¥–µ–ª–∫–∏:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫:", error);
    return [];
  }
};

export const createDeal = async (dealData: any) => {
  try {
    let token = localStorage.getItem("access_token");

    if (!token) {
      console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
      await checkAuth();
      token = localStorage.getItem("access_token");
    }

    if (!token) {
      throw new Error("üö® –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!");
    }

    const headers = {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ OrderCreateSchema:
    const newDealData = {
      name: dealData.name, // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
      description: dealData.description || null,
      date_of_creation: new Date().toISOString(), // ISO-—Ñ–æ—Ä–º–∞—Ç
      date_of_send: new Date().toISOString(),
      address: dealData.address || null,
      delivery_method: dealData.delivery_method || "COURIER",
      price: dealData.amount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º amount (—á–∏—Å–ª–æ)
      client_name: dealData.client_name,
      client_phone: dealData.client_phone,
      column_id: dealData.column_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º column_id (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:", JSON.stringify(newDealData, null, 2));

    const response = await axios.post(`${API_BASE_URL}/orders`, newDealData, { headers });

    console.log("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞):", JSON.stringify(response.data, null, 2));

    return response.data;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", error);
    console.log("üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ª–Ω—ã–π):", JSON.stringify(error.response?.data, null, 2));
    throw error;
  }
};

