import React, { useState } from "react";
import "@/shared/styles/globals.css"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
import "@/shared/styles/nav-message-user.css"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞
import { NavMessageUser } from "@/shared/ui/common/nav-message-user"; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
import { NavCRM } from "@/shared/ui/common/dop-navigation-message-user"; // –î–æ–ø. –Ω–∞–≤–∏–≥–∞—Ü–∏—è
import { useAuth } from "@/features/auth/AuthContext";

const API_MESSAGES_URL = "http://127.0.0.1:8000/messages"; // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

export const DialogUser: React.FC = () => {
  const [selectedChat, setSelectedChat] = useState<{ id: string; userName: string } | null>(null);
  const [message, setMessage] = useState<string>(""); // –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const [chatMessages, setChatMessages] = useState<
    Array<{ from: string; text: string; time: string }>
  >([]);

  const currentUserId = "user-uuid"; // ‚úÖ –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentUserRole = "LEAD"; // ‚úÖ –ú–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—Ç—å –Ω–∞ "MANAGER" –∏–ª–∏ "BOT"

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
 const handleSelectChat = async (id: string, userName: string) => {
  console.log("üìå –í—ã–±—Ä–∞–Ω session_id:", id);
  setSelectedChat({ id, userName });
  setChatMessages([]); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö

  try {
    const response = await fetch(`${API_MESSAGES_URL}/by-session/${id}`);
    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${response.status}`);

    const data = await response.json();
    console.log("üì• –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!data.messages || !Array.isArray(data.messages)) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", data);
      return;
    }

    const formattedMessages = data.messages.map((msg: any) => ({
      from: typeof msg.role === "string" ? msg.role.toLowerCase() : "unknown", // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ msg.role —Å—Ç—Ä–æ–∫–∞
      text: msg.text || "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", // ‚úÖ –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
      time: msg.created_at
        ? new Date(msg.created_at).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
        : "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏", // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    }));

    setChatMessages(formattedMessages);


  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
  }
};



  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async () => {
  if (!selectedChat || !message.trim()) return;

  const roleToSend = "MANAGER";
  const senderId = roleToSend === "MANAGER"
    ? "10000000-0000-0000-0000-000000000000"
    : currentUserId;

  const newMessage = {
    session_id: selectedChat.id,
    text: message,
    sender: senderId,  // –≤—ã–±–∏—Ä–∞–µ–º sender –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    role: roleToSend,
  };

  try {
    const response = await fetch(API_MESSAGES_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newMessage),
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");

    const data = await response.json();
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ID:", data.session_id);

    const currentTime = new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    setChatMessages((prev) => [
      ...prev,
      { from: roleToSend.toLowerCase(), text: message, time: currentTime },
    ]);

    setMessage("");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
};


  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
      handleSendMessage(); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    }
  };

  return (
    <div className="nav-message-user-home-container" style={{ display: "flex", position: "relative" }}>
      {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ */}
      <NavMessageUser onSelectChat={handleSelectChat} />

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <NavCRM />

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å */}
      <main className="nav-message-user-content">
            {/* –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
           <div className="nav-msg-user-chat-messages">
      <div className="nav-msg-user-messages-container">
        {chatMessages.map((msg, index) => (
            <div key={index} className="nav-msg-user-chat-message-wrapper">
      <div className="nav-msg-user-message-avatar">
        <img
          src={msg.from === "lead" ? "/lead-icon.svg" : "/vika_photo.jpg"}
          alt="–ê–≤–∞—Ç–∞—Ä"
          className="nav-msg-user-avatar-icon"
        />
      </div>

      <div className="nav-msg-user-message-info">
        <p className="nav-msg-user-sender-name">
          {msg.from === "lead" ? "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" : "–í–∏–∫—Ç–æ—Ä–∏—è –ü–∞–ª–∞–≥–∏–Ω–∞"}
        </p>

        <div
          className={`nav-msg-user-chat-message ${
            msg.from === "lead"
              ? "nav-msg-user-sent"
              : msg.from === "manager"
              ? "nav-msg-user-manager"
              : "nav-msg-user-received"
          }`}
        >
          <div className="nav-msg-user-message-content">
            <p className="nav-msg-user-message-text">{msg.text}</p>
            <span className="nav-msg-user-message-time">{msg.time}</span>
          </div>
        </div>
      </div>
    </div>

        ))}
      </div>

      {selectedChat && (
        <div className="nav-message-user-chat-input-container">
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={`–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${selectedChat.userName}`}
            className="nav-message-user-chat-input"
          />
          <button onClick={handleSendMessage} className="nav-message-user-chat-send-button">
            <img
              src="/Send-message.svg"
              alt="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
              className="nav-message-user-send-icon"
            />
          </button>
        </div>
      )}
    </div>

      </main>
    </div>
  );
};

export default DialogUser;
