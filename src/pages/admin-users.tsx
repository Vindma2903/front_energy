import React, { useEffect, useState } from "react";
import axios from "axios";
import { MainSidebar } from "@/shared/ui/common/main-sidebar";
import "@/shared/styles/globals.css";
import "@/shared/styles/admin-users.css";
import DynamicBreadcrumbs from "@/shared/ui/common/Breadcrumb";
import UniversalTable from "@/shared/ui/common/table-projects";
import UsersAction from "@/shared/ui/common/users-action";
import { useNavigate, useLocation } from "react-router-dom";
import { useAuth } from "@/features/auth/AuthContext"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useAuth

const columns = [
  { name: "ID", uid: "id", sortable: false },
  { name: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", uid: "username", sortable: true },
  { name: "E-mail", uid: "email", sortable: true },
  { name: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", uid: "registrationDate", sortable: true },
  { name: "–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", uid: "role", sortable: true },
  { name: "–°—Ç–∞—Ç—É—Å", uid: "status", sortable: true },
  { name: "–î–µ–π—Å—Ç–≤–∏—è", uid: "actions", sortable: false },
];

const AdminUsers = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user, loading, checkAuth } = useAuth(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [data, setData] = useState([]);
  const [lastUpdated, setLastUpdated] = useState<string | null>(null);
  const [activeUserId, setActiveUserId] = useState<string | null>(null);
  const [isActionOpen, setIsActionOpen] = useState(false);
  const [fetchError, setFetchError] = useState<string | null>(null);

  // üî• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const fetchUsers = async () => {
    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /admin/get_all_users...");

    try {
      // üìå –í—ã–≤–æ–¥–∏–º `cookies` –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ
      console.log("üîé –¢–µ–∫—É—â–∏–µ cookies:", document.cookie);

      let token = localStorage.getItem("access_token"); // –î–æ—Å—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ `localStorage`

      if (!token) {
        console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");
        await checkAuth(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å `token`
        token = localStorage.getItem("access_token"); // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ
      }

      if (!token) {
        throw new Error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞!");
      }

      console.log(`üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: Bearer ${token}`);

      // üî• –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å `Bearer token` + `cookies`
      const response = await axios.get("http://localhost:8000/admin/get_all_users", {
        withCredentials: true, // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –ü–µ—Ä–µ–¥–∞–µ—Ç cookies
        headers: {
          Authorization: `Bearer ${token}`, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        },
      });

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

      const { users, last_updated } = response.data;
      if (lastUpdated !== last_updated) {
        setData(users);
        setLastUpdated(last_updated);
      }
      setFetchError(null);
    } catch (err: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err.response || err.message);

      if (err.response?.status === 401) {
        setFetchError("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.");
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ 401, –≤—ã–∑—ã–≤–∞–µ–º `checkAuth()`...");
        await checkAuth(); // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      } else if (err.response?.status === 403) {
        setFetchError("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        console.warn("üõë –û—à–∏–±–∫–∞ 403, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é...");
        navigate("/"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
      } else {
        setFetchError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  };

  // üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ `/login`, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
  useEffect(() => {
    if (!loading) {
      if (!user) {
        navigate("/login"); // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
      } else if (!user.isAdmin) {
        navigate("/"); // –ù–µ –∞–¥–º–∏–Ω ‚Äî –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      }
    }
  }, [loading, user, navigate]);

  // ‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ `/admin-users`
  useEffect(() => {
    if (location.pathname === "/admin-users" && user?.isAdmin) {
      fetchUsers();
      const intervalId = setInterval(fetchUsers, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
      return () => clearInterval(intervalId);
    }
  }, [location.pathname, user, lastUpdated]);

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  }

  return (
    <div className="home-container">
      <MainSidebar />
      <main className="content">
        <DynamicBreadcrumbs
          breadcrumbs={[
            { label: "–ì–ª–∞–≤–Ω–∞—è", to: "/" },
            { label: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", to: "/admin" },
            { label: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", to: "/admin-users" },
          ]}
        />
        <h1 className="content-title">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
        {fetchError && <p className="error-message">{fetchError}</p>}
        <UniversalTable
          columns={columns}
          data={data}
          renderCell={(item, columnKey) =>
            columnKey === "actions" ? (
              <img
                src="/public/actions.svg"
                alt="Actions"
                className="action-icon"
                onClick={() => {
                  setActiveUserId(item.id);
                  setIsActionOpen(true);
                }}
              />
            ) : (
              item[columnKey]
            )
          }
          emptyContent="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        />
        {isActionOpen && activeUserId && (
          <UsersAction
            isOpen={isActionOpen}
            onOpenChange={setIsActionOpen}
            onApprove={() => setIsActionOpen(false)}
            onReject={() => setIsActionOpen(false)}
            onBlock={() => setIsActionOpen(false)}
          />
        )}
      </main>
    </div>
  );
};

export default AdminUsers;
